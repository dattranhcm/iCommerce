<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>2.4.0</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>
	<groupId>com.technicaltest.icommerce</groupId>
	<artifactId>icommerce</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<packaging>pom</packaging>
	<name>${project.artifactId}</name>
	<description>iCommerce Project </description>

	<modules>
		<module>icommerce-api-gateway</module>
		<module>icommerce-order-service</module>
		<module>icommerce-user-service</module>
		<module>icommerce-config-server</module>
	</modules>

	<properties>
		<java.version>1.8</java.version>
		<assertj.version>3.11.1</assertj.version>

		<spring-boot.version>2.4.0</spring-boot.version>
		<spring-cloud.version>Hoxton.SR9</spring-cloud.version>

		<maven-surefire-plugin.version>2.22.0</maven-surefire-plugin.version>

		<docker.image.prefix>icommerce</docker.image.prefix>
		<docker.image.exposed.port>9090</docker.image.exposed.port>
		<docker.image.dockerfile.dir>${basedir}</docker.image.dockerfile.dir>
		<docker.image.dockerize.version>v0.6.1</docker.image.dockerize.version>
		<docker.plugin.version>1.2.0</docker.plugin.version>
	</properties>

	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-jpa</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-mongodb</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-redis-reactive</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-security</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web-services</artifactId>
		</dependency>
		<dependency>
			<groupId>org.flywaydb</groupId>
			<artifactId>flyway-core</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.kafka</groupId>
			<artifactId>spring-kafka</artifactId>
		</dependency>

		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
			<optional>true</optional>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-tomcat</artifactId>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
			<exclusions>
				<exclusion>
					<groupId>org.junit.vintage</groupId>
					<artifactId>junit-vintage-engine</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<groupId>io.projectreactor</groupId>
			<artifactId>reactor-test</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.kafka</groupId>
			<artifactId>spring-kafka-test</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.security</groupId>
			<artifactId>spring-security-test</artifactId>
			<scope>test</scope>
		</dependency>
	</dependencies>

	<profiles>
		<profile>
			<id>springboot</id>
			<activation>
				<file>
					<!-- Just a way to identify a Spring Boot application -->
					<exists>src/main/resources/bootstrap.yml</exists>
				</file>
			</activation>
			<build>
				<plugins>
					<plugin>
						<groupId>org.springframework.boot</groupId>
						<artifactId>spring-boot-maven-plugin</artifactId>
						<configuration>
							<fork>true</fork>
							<!-- Layered jars optimizes Docker images -->
							<layers>
								<enabled>true</enabled>
							</layers>
						</configuration>
						<executions>
							<execution>
								<!-- Spring Boot Actuator displays build-related information if a META-INF/build-info.properties file is present -->
								<goals>
									<goal>build-info</goal>
								</goals>
								<configuration>
									<additionalProperties>
										<encoding.source>${project.build.sourceEncoding}</encoding.source>
										<encoding.reporting>${project.reporting.outputEncoding}</encoding.reporting>
										<java.source>${maven.compiler.source}</java.source>
										<java.target>${maven.compiler.target}</java.target>
									</additionalProperties>
								</configuration>
							</execution>
						</executions>
					</plugin>

					<!-- Spring Boot Actuator displays build-related information if a META-INF/build-info.properties file is present -->
					<plugin>
						<groupId>pl.project13.maven</groupId>
						<artifactId>git-commit-id-plugin</artifactId>
						<executions>
							<execution>
								<goals>
									<goal>revision</goal>
								</goals>
							</execution>
						</executions>
						<configuration>
							<verbose>true</verbose>
							<dateFormat>yyyy-MM-dd'T'HH:mm:ssZ</dateFormat>
							<generateGitPropertiesFile>true</generateGitPropertiesFile>
							<generateGitPropertiesFilename>${project.build.outputDirectory}/git.properties
							</generateGitPropertiesFilename>
							<failOnNoGitDirectory>false</failOnNoGitDirectory>
						</configuration>
					</plugin>
				</plugins>
			</build>

		</profile>

		<profile>
			<id>buildDocker</id>
			<build>
				<pluginManagement>
					<plugins>
						<plugin>
							<groupId>com.spotify</groupId>
							<artifactId>docker-maven-plugin</artifactId>
							<version>${docker.plugin.version}</version>
							<executions>
								<execution>
									<phase>install</phase>
									<goals>
										<goal>build</goal>
									</goals>
								</execution>
							</executions>
							<configuration>
								<imageName>${docker.image.prefix}/${project.artifactId}</imageName>
								<dockerDirectory>${docker.image.dockerfile.dir}</dockerDirectory>
								<serverId>docker-hub</serverId>
								<registryUrl>https://index.docker.io/v1/</registryUrl>
								<resources>
									<resource>
										<targetPath>/</targetPath>
										<directory>${project.build.directory}</directory>
										<include>${project.build.finalName}.jar</include>
									</resource>
								</resources>
								<buildArgs>
									<ARTIFACT_NAME>${project.build.finalName}</ARTIFACT_NAME>
									<EXPOSED_PORT>${docker.image.exposed.port}</EXPOSED_PORT>
									<DOCKERIZE_VERSION>${docker.image.dockerize.version}</DOCKERIZE_VERSION>
								</buildArgs>
							</configuration>
						</plugin>
					</plugins>
				</pluginManagement>
			</build>
		</profile>
	</profiles>

	<repositories>
		<repository>
			<id>spring-milestones</id>
			<name>Spring Milestones</name>
			<url>https://repo.spring.io/milestone</url>
			<snapshots>
				<enabled>false</enabled>
			</snapshots>
		</repository>
	</repositories>

	<pluginRepositories>
		<pluginRepository>
			<id>spring-milestones</id>
			<name>Spring Milestones</name>
			<url>https://repo.spring.io/milestone</url>
			<snapshots>
				<enabled>false</enabled>
			</snapshots>
		</pluginRepository>
	</pluginRepositories>

</project>
